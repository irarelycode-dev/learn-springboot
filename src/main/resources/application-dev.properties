#spring.datasource.url=jdbc:mysql://localhost:3306/bookdb?serverTimeZone=UTC
##&createDatabaseIfNotExist=true
#spring.datasource.username=bookadmin
#spring.datasource.password=Vigneshcse-15
#spring.jpa.database=mysql

spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER
spring.h2.console.enabled=true
spring.data.jpa.repositories.bootstrap-mode=default
spring.jpa.show-sql=true

logging.level.org.springframework=info
management.endpoints.web.exposure.include=health,metrics

#initialize a database using JPA
#spring.jpa.generate-ddl. This is vendor independent and is boolean
#initialize a database using hibernate
#spring.jpa.hibernate.ddl-auto. This controls the behaviour in a more fine-grained way

#Configure JPA/Hibernate to auto create the tables
#spring.jpa.hibernate.ddl-auto=update
#enum values={"create","update","create-drop","validate","none"}
#create-hibernate first drops existing tables and then creates new tables
#update-the object model is compared with existing schema, and then hibernate updates the schema according to diff. It never deletes the existing tables or columns
#create-drop-similar to create but hibernate drops all tables after all operations are done. Used in unit-testing
##validate-hibernate only validates whether the tables and columns exists,otherwise throws error
#none-turns off ddl generation

#script-based initialization is performed by default only for embedded databases. To always initialize a database using scripts, we'll have to use:
#{always,never,embedded:always initialize if an embedded database is in use. This is the default if the property value is not specified.}
spring.sql.init.mode=always

#This will ensure that after Hibernate schema creation is performed, then additionally data.sql is read for any additional schema changes, and further data.sql is executed to populate the database.
spring.jpa.defer-datasource-initialization=true

#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.data.rest.default-page-size=5


#Reduce logging level. Set logging level to warn
#logging.level.root=warn
##Add logging configs to display SQL statements
#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.orm.jdbc.bind=trace

#spring security
#spring.security.user.name=vignesh
#spring.security.user.password=test123

#liquibase
#spring.liquibase.user=bookadmin
#spring.liquibase.password=Vigneshcse-15

#flyway
#spring.flyway.user=bookadmin
#spring.flyway.password=Vigneshcse-15
#spring.flyway.baselineOnMigrate = true